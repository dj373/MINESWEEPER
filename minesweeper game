#include<iostream>
#include<conio.h>
#include<cstdlib>
#include<ctime>
#define MAXROW 13
#define MAXCOL 9
#define numofbombs 10
using namespace std;

int minearr[MAXROW][MAXCOL];
bool manage_mine[MAXROW][MAXCOL];
void intro();
void init_mine();
void prep_mine(int tmpr, int tmpc);
void openingemptybox(int rownum, int colnum);
int openedboxnum();
void show_mine();
void game_over();
bool test_input(int rowno, int colno);

int main(){
  int i = 0, j, tempr, tempc, therownum = 0, thecolnum = 0;
  int closednum;

  intro();
  closednum = (MAXROW-2)*(MAXCOL-2) - numofbombs;
  init_mine();

  /* CREATING THE MINE */
  srand(time(NULL));
  while(i<numofbombs){
    tempr = rand()%(MAXROW-2) + 1;
    tempc = rand()%(MAXCOL-2) + 1;
    if(minearr[tempr][tempc] != -1){
      minearr[tempr][tempc] = -1;
      prep_mine(tempr, tempc);
      i++;
    }
  }

  /* THE GAMEPLAY */
  while(openedboxnum() != closednum && minearr[therownum][thecolnum] != -1){
    show_mine();
    PORT:
    cout << "COLUMN NUMBER: "; cin >> thecolnum;
    cout << "ROW NUMBER   : "; cin >> therownum;
    if(test_input(therownum, thecolnum) == false){
      cout << "\n*PLEASE READ THE INFO CAREFULLY*\n\n";
      goto PORT;
    }
    if(minearr[therownum][thecolnum] == 0) openingemptybox(therownum, thecolnum);
    else manage_mine[therownum][thecolnum] = true;
    cout << "\n" << endl;
  }

  game_over();
  if(minearr[therownum][thecolnum] == -1) cout << "\n\t\t\t\tYOU CLICKED A BOMB\n\t\t\t\tGAME OVER";
  else cout << "\n\t\t\t\tCONGRATULATIONS...\n\t\t\t\tGAME COMPLETED";
  getch();
  return 0;
}

/* ALL THE FUNCTIONS */
void intro(){
  cout << "\t\t\tWELCOME. PLAY WISELY.\n\t\t\tcreator: SUSILKOIRALA\n\n*INFO:  1. The row must be within 0-" << MAXROW-1 << " and column 0-"<< MAXCOL-1 << ".\n\t2. \'(o)\' means closed box, \'(b)\' means bomb, \'-\' means blank box." <<endl;
  cout << "*Press any key to begin...";
  getch();
  cout << "\n\n" ;
}

void init_mine(){
  int i, j;
  for(i=0; i<MAXROW; i++){
    for(j=0; j<MAXCOL; j++){
      minearr[i][j] = 0;
      manage_mine[i][j] = false;
    }
  }
  for(i=0; i<MAXROW; i++) minearr[i][0]=minearr[i][MAXCOL-1]=-4;
  for(i=0; i<MAXCOL; i++) minearr[0][i]=minearr[MAXROW-1][i]=-4;
}

void prep_mine(int tmpr, int tmpc){
  int i, j;
  for(i=tmpr-1; i<=tmpr+1; i++){
    for(j=tmpc-1; j<=tmpc+1; j++){
      if(minearr[i][j] >= 0) minearr[i][j]++;
    }
  }
}

void  openingemptybox(int rownum, int colnum){
  int i, j;
  for(i=rownum-1; i<=rownum+1; i++){
    for(j=colnum-1; j<=colnum+1; j++){
      if(manage_mine[i][j] == false){
        manage_mine[i][j] = true;
        if(minearr[i][j] == 0)
        openingemptybox(i, j);
      }
    }
  }
}

int openedboxnum(){
  int i, j, sum = 0;
  for(i=1; i<MAXROW-1; i++){
    for(j=1; j<MAXCOL-1; j++){
        if(manage_mine[i][j] == true) sum++;
    }
  }
  return sum;
}

bool test_input(int rowno, int colno){
  int i, flag1 = 0, flag2 = 0;
  for(i=1; i<MAXROW-1; i++){
    if(rowno == i) flag1++;
  }
  for(i=1; i<MAXCOL-1; i++){
    if(colno == i) flag2++;
  }
  if(flag1 == 0 || flag2 == 0) return false;
  return true;
}


void show_mine(){
  int i, j;
  for(i=1; i<MAXROW-1; i++){
    for(j=1; j<MAXCOL-1; j++){
      switch(manage_mine[i][j]){
        case true:
          switch(minearr[i][j]){
            case 0 : cout << "  -  "; break;
            default: cout << "  " << minearr[i][j] <<"  ";
          }
          break;

        default:
          cout << " (o) ";
      }
    }
    cout << "\n" << endl;
  }
}

void game_over(){
  int i, j;
  for(i=1; i<MAXROW-1; i++){
    for(j=1; j<MAXCOL-1; j++){
      switch(minearr[i][j]){
        case 0 : cout << "  -  "; break;
        case -1 : cout << " (b) "; break;
        default: cout << "  " << minearr[i][j] << "  ";
      }
    }
    cout << "\n" << endl;
  }
}
